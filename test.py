import discord
import requests
from discord.ui import Button, View, modal
from discord.ext import commands
from discord import message
import json
import datetime
from datetime import timezone
import time
import pytz
from database import *


#–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
def reg_check(id):
    current_date = datetime.date.today()
    registration_start_date = datetime.datetime.strptime(
        ([x["registration_start_date"] for x in conferences_json if x['conference_id'] == id])[0],
        "%d-%m-%Y").date()
    registration_end_date = datetime.datetime.strptime(
        ([x["registration_end_date"] for x in conferences_json if x['conference_id'] == id])[0], "%d-%m-%Y").date()

    return registration_start_date <= current_date <= registration_end_date


#–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è
def conf_check(id):
    current_date = datetime.date.today()
    conference_end_date = datetime.datetime.strptime(
        ([x["conference_end_date"] for x in conferences_json if x['conference_id'] == id])[0], "%d-%m-%Y").date()

    return current_date <= conference_end_date


#—É–∂–∞—Å–Ω—ã–π –∫–æ—Å—Ç—ã–ª—å
idholder = ""
new_app_holder = {
        "id": " ",
        "conference_id": " ",
        "telegram_id": " ",
        "discord_id": " ",
        "submitted_at": " ",
        "updated_at": " ",
        "email": " ",
        "phone": " ",
        "name": " ",
        "surname": " ",
        "patronymic": " ",
        "university": " ",
        "student_group": " ",
        "applicant_role": " ",
        "title": " ",
        "adviser": " ",
        "coauthors": []
    }

#–º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é
def submission_check(id):
    current_date = datetime.date.today()
    submission_end_date = datetime.datetime.strptime(
        ([x["submission_end_date"] for x in conferences_json if x['conference_id'] == id])[0], "%d-%m-%Y").date()

    return current_date <= submission_end_date

#–±—ã–ª–∏ —Ä–∞–Ω–µ–µ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–µ—Ç
def application_check(id):
    if any([x for x in application_json if x["conference_id"] == (id) and x["discord_id"] == "1234"]):
        return True
    else:
        return False


intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)


#–≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
@bot.command()
async def start(ctx):
    view = View()
    for x in conferences_json:
        label = x["conference_short_name_russian"]
        custom_id = x["conference_id"]
        emoji = ""
        if conf_check(x['conference_id']):
            style = discord.ButtonStyle.green
        else:
            style = discord.ButtonStyle.red
        if reg_check(x['conference_id']):
            emoji += "üëç"
        if application_check(x['conference_id']):
            emoji += "üìÉ"
        if emoji == "":
            emoji += "üõë"
        button = Button(label=label, style=style, custom_id=custom_id, emoji=emoji)
        view.add_item(button)
    await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é. \n–ö—Ä–∞—Å–Ω—ã–º –æ—Ç–º–µ—á–µ–Ω—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏. \n–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ "
                   "–º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –æ—Ç–º–µ—á–µ–Ω—ã –∑–Ω–∞–∫–æ–º üëç\n"
                   "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ä–∞–Ω–µ–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç–º–µ—á–µ–Ω—ã –∑–Ω–∞–∫–æ–º üìÉ", view=view)
    res = await bot.wait_for('interaction', check=lambda interaction: interaction.data["component_type"] == 2 and "custom_id" in interaction.data.keys())
    for item in view.children:
        if item.custom_id == res.data["custom_id"]:
            button = item
            await second_view(ctx, button.custom_id)

#—Å—Ç—Ä–∞–Ω–∏—á–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
async def second_view(ctx, id):
    conference = [x for x in conferences_json if x['conference_id'] == id][0]
    application_list = [x for x in application_json if x['discord_id'] == "1234" and x['conference_id'] == id]
    name = conference["conference_name_russian"]
    await ctx.send(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é: {name}\n–°–ø–∏—Å–æ–∫ –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:\n")
    if not application_list:
        await ctx.send("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ")
    else:
        view1 = View()
        for x in application_list:
            title = x["title"]
            button = Button(label=title, emoji="üîç", custom_id=x["id"])
            view1.add_item(button)
        await ctx.send(view=view1)
    view = View()
    button1 = Button(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", style=discord.ButtonStyle.green)
    button2 = Button(label="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.green)
    button3 = Button(label="–ù–∞–∑–∞–¥", style=discord.ButtonStyle.red)
    view.add_item(button1)
    if reg_check(id):
        view.add_item(button2)
    view.add_item(button3)

    async def back_button_callback(interaction):
        await start(ctx)

    button3.callback = back_button_callback

    async def info_button_callback(interaction):
        await conference_info(ctx, id)

    button1.callback = info_button_callback

    async def add_button_callback(interaction: discord.Interaction):
        global idholder
        idholder = id
        #new_app = create_new_application(get_unique_id(application_json), id, "1234", datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%Y-%m-%dT%H:%M:%S.%f%z"))
        await interaction.response.send_modal(AddModal())
        await fourth_view(ctx)

    button2.callback = add_button_callback

    await ctx.send(view=view)
    if application_list:
        res = await bot.wait_for('interaction', check=lambda interaction: interaction.data["component_type"] == 2 and "custom_id" in interaction.data.keys())
        for item in view1.children:
            if item.custom_id == res.data["custom_id"]:
                button = item
                await third_view(ctx, button.custom_id)


#–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
async def fourth_view(ctx):
    view = View()
    button1 = Button(label="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", style=discord.ButtonStyle.green)
    view.add_item(button1)

    async def add_button_callback(interaction: discord.Interaction):
        await interaction.response.send_modal(AddModal2())
        await fifth_view(ctx)

    button1.callback = add_button_callback
    await ctx.send(view=view)


async def fifth_view(ctx):
    view = View()
    button1 = Button(label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.green)
    button2 = Button(label="–û—Ç–º–µ–Ω–∞", style=discord.ButtonStyle.red)
    view.add_item(button1)
    view.add_item(button2)

    async def add_button_callback(interaction: discord.Interaction):
        global new_app_holder
        application_json.append(new_app_holder)
        global idholder
        new_app_holder = {
            "id": " ",
            "conference_id": " ",
            "telegram_id": " ",
            "discord_id": " ",
            "submitted_at": " ",
            "updated_at": " ",
            "email": " ",
            "phone": " ",
            "name": " ",
            "surname": " ",
            "patronymic": " ",
            "university": " ",
            "student_group": " ",
            "applicant_role": " ",
            "title": " ",
            "adviser": " ",
            "coauthors": []
        }
        await second_view(ctx, idholder)
        idholder = ""

    button1.callback = add_button_callback

    async def back_button_callback(interaction: discord.Interaction):
        global new_app_holder
        global idholder
        new_app_holder = {
            "id": " ",
            "conference_id": " ",
            "telegram_id": " ",
            "discord_id": " ",
            "submitted_at": " ",
            "updated_at": " ",
            "email": " ",
            "phone": " ",
            "name": " ",
            "surname": " ",
            "patronymic": " ",
            "university": " ",
            "student_group": " ",
            "applicant_role": " ",
            "title": " ",
            "adviser": " ",
            "coauthors": []
        }
        await second_view(ctx, idholder)
        idholder = ""

    button2.callback = back_button_callback
    await ctx.send(view=view)


def new_app_part1(title, name, surname, patronymic, university, id):
    new_app = create_new_application(get_unique_id(application_json), id, "1234", datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%Y-%m-%dT%H:%M:%S.%f%z"))
    new_app["name"] = name
    new_app["surname"] = surname
    new_app["patronymic"] = patronymic
    new_app["university"] = university
    new_app["title"] = title
    return new_app


def new_app_part2(new_app, student_group, applicant_role, adviser, email, phone):
    new_app["student_group"] = student_group
    new_app["applicant_role"] = applicant_role
    new_app["adviser"] = adviser
    new_app["email"] = email
    new_app["phone"] = phone
    return new_app


#–¥–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
class AddModal(discord.ui.Modal, title="–î–æ–±–≤–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"):
    apptitle = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="–∑–∞–≥–æ–ª–æ–≤–æ–∫",
        required=True,
        max_length=80,
        placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏"
    )

    name = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="–ò–º—è",
        required=True,
        max_length=30,
        placeholder="–≤–∞—à–µ –∏–º—è"
    )

    surname = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="–§–∞–º–∏–ª–∏—è",
        required=True,
        max_length=30,
        placeholder="–≤–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è"
    )

    patronymic = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="–û—Ç—á–µ—Å—Ç–≤–æ",
        required=False,
        max_length=30,
        placeholder="–≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)"
    )

    university = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        required=True,
        max_length=30,
        placeholder="–≤–∞—à–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
    )

    async def on_submit(self, interaction: discord.Interaction):
        global new_app_holder
        global idholder
        new_app_holder = new_app_part1(self.apptitle, self.name, self.surname, self.patronymic, self.university, idholder)
        await interaction.response.defer()


class AddModal2(discord.ui.Modal, title="–î–æ–±–≤–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"):
    student_group = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="–ì—Ä—É–ø–ø–∞",
        required=False,
        max_length=30,
        placeholder="–≤–∞—à–∞ –≥—Ä—É–ø–ø–∞"
    )

    applicant_role = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="–î–æ–ª–∂–Ω–æ—Å—Ç—å",
        required=True,
        max_length=30,
        placeholder="–≤–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç)"
    )

    adviser = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
        required=True,
        max_length=80,
        placeholder="–§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—É—á—Ä—É–∫–∞"
    )

    email = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="email",
        required=False,
        max_length=30,
        placeholder="example@example.com"
    )

    phone = discord.ui.TextInput(
        style=discord.TextStyle.short,
        label="–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤–∑—è–∏",
        required=False,
        max_length=30,
        placeholder="+79001234567"
    )

    async def on_submit(self, interaction: discord.Interaction):
        global new_app_holder
        new_app_holder = new_app_part2(new_app_holder, self.student_group, self.applicant_role, self.adviser, self.email, self.phone)
        conf_id = new_app_holder["conference_id"]
        discord_id = new_app_holder["discord_id"]
        title = new_app_holder["title"]
        submitted_at = new_app_holder["submitted_at"]
        name = new_app_holder["name"]
        surname = new_app_holder["surname"]
        patronymic = new_app_holder["patronymic"]
        university = new_app_holder["university"]
        student_group = new_app_holder["student_group"]
        applicant_role = new_app_holder["applicant_role"]
        adviser = new_app_holder["adviser"]
        email = new_app_holder["email"]
        phone = new_app_holder["phone"]
        await interaction.response.send_message(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:\nconference_id: {conf_id}\ndiscord_id: {discord_id}\n"
                                                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {submitted_at}\n"
                   f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {email}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                   f"–ò–º—è: {name}\n–§–∞–º–∏–ª–∏—è: {surname}\n–û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}\n–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {university}\n"
                   f"–ì—Ä—É–ø–ø–∞: {student_group}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {applicant_role}\n–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {adviser}\n")



#—Å—Ç—Ä–∞–Ω–∏—á–∫–∞ –∑–∞—è–≤–∫–∏
async def third_view(ctx, id):
    application = [x for x in application_json if x['id'] == id][0]
    conference_id = application["conference_id"]
    title = application["title"]
    submitted_at = application["submitted_at"]
    updated_at = application["updated_at"]
    email = application["email"]
    phone = application["phone"]
    name = application["name"]
    surname = application["surname"]
    patronymic = application["patronymic"]
    university = application["university"]
    student_group = application["student_group"]
    applicant_role = application["applicant_role"]
    adviser = application["adviser"]
    coauthors = ", ".join([x['name']+" "+x["surname"]+ " "+ x["patronymic"] for x in application['coauthors']])
    view = View()
    button1 = Button(label="–ù–∞–∑–∞–¥", style=discord.ButtonStyle.red)
    button2 = Button(label="–î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", style=discord.ButtonStyle.green)
    view.add_item(button1)
    view.add_item(button2)

    async def back_button_callback(interaction):
        await second_view(ctx, conference_id)

    button1.callback = back_button_callback

    async def add_button_callback(interaction: discord.Interaction):
        attachment_url = ctx.message.attachments[0].url
        file_request = requests.get(attachment_url)
        print(file_request.content)
        await interaction.response.defer()

    button1.callback = add_button_callback
    await ctx.send(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {submitted_at}\n"
                   f"–û–±–Ω–æ–≤–ª–µ–Ω–∞: {updated_at}\n–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {email}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                   f"–ò–º—è: {name}\n–§–∞–º–∏–ª–∏—è: {surname}\n–û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}\n–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {university}\n"
                   f"–ì—Ä—É–ø–ø–∞: {student_group}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {applicant_role}\n–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {adviser}\n"
                   f"–°–æ–∞–≤—Ç–æ—Ä—ã: {coauthors}", view=view)


#–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
async def conference_info(ctx, id):
    conference = [x for x in conferences_json if x['conference_id'] == id][0]
    name = conference["conference_name_russian"]
    short_name = conference["conference_short_name_russian"]
    conference_name_english = conference["conference_name_english"]
    conference_short_name_english = conference["conference_short_name_english"]
    organizing_organization = conference["organizing_organization"]
    registration_dates = conference["registration_start_date"] + " - " +conference["registration_end_date"]
    submission_dates = conference["submission_start_date"] + " - " + conference["submission_end_date"]
    conference_dates = conference["conference_start_date"] + " - " + conference["conference_end_date"]
    site = conference["conference_website_url"]
    email = conference["contact_email"]
    if not reg_check(id):
        registration_dates += " (–∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å)"
    if not submission_check(id):
        submission_dates += " (–∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å)"
    if not conf_check(id):
        conference_dates += " (–∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å)"
    view = View()
    button1 = Button(label="–ù–∞–∑–∞–¥", style=discord.ButtonStyle.red)
    view.add_item(button1)

    async def back_button_callback(interaction):
        await second_view(ctx, id)

    button1.callback = back_button_callback
    await ctx.send(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞: {short_name}\n"
                   f"–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: {conference_name_english}\n"
                   f"–ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: {conference_short_name_english}\n"
                   f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {organizing_organization}\n–î–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_dates}\n"
                   f"–ü—Ä–∏–µ–º —Å—Ç–∞—Ç–µ–π: {submission_dates}\n–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {conference_dates}\n"
                   f"–í–µ–±—Å–∞–π—Ç: {site}\n–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {email}\n", view=view)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.run('MTE0ODk1NTM2OTg0Mjk1NDI2MA.GT-dIu.Qjzmo7uEIrqYqa5ZuW-_yFOshCDJIRRe3g5gLg')